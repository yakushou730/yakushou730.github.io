<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>programming - Tag - YakuShou's NOTEBOOK</title><link>https://blog.yakushou.com/tags/programming/</link><description>programming - Tag - YakuShou's NOTEBOOK</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 06 Mar 2022 22:05:26 +0800</lastBuildDate><atom:link href="https://blog.yakushou.com/tags/programming/" rel="self" type="application/rss+xml"/><item><title>fundamental2</title><link>https://blog.yakushou.com/posts/golang/fundamental2/</link><pubDate>Sun, 06 Mar 2022 22:05:26 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/fundamental2/</guid><description><![CDATA[Reading and Writing bufio 用於 buffered input 和 output
最簡單的 input 方式是使用 fmt 的 Scan 方法
var firstName, lastName string fmt.Scanln(&amp;firstName, &amp;lastName) Scanln 從 standard input 讀取 text，以空白隔開的輸入，直到掃到 newline
Scanf, Fscanf, Sscanf 透過 format string 來 parse 參數
 Scanf 透過 keyboard 輸入 Sscanf 透過其他 string 輸入  透過 bufio 取得輸入字串
// os.Stdin 滿足 io.Reader inputReader = bufio.NewReader(os.Stdin) fmt.Println(&#34;Please enter some input: &#34;) input, err = inputReader.ReadString(&#39;\n&#39;) // err 是 io.]]></description></item><item><title>etcd</title><link>https://blog.yakushou.com/posts/programming/etcd/</link><pubDate>Sun, 06 Mar 2022 11:39:08 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/programming/etcd/</guid><description>install brew install etcd 可在 service list 確認是否正常
brew services list # results etcd started yakushou730 ~/Library/LaunchAgents/homebrew.mxcl.etcd.plist 操作 安裝完後系統會有 etcdctl 的指令可以使用
寫入
etcdctl put foo bar 讀取
etcdctl get foo # result foo bar # 另一個範例 etcdctl get product.rpc --prefix # result product.rpc/7587860940551895303 192.168.0.221:8081 刪除
etcdctl del foo # result 1</description></item><item><title>Ultimate Go Notebook</title><link>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-go-notebook/</link><pubDate>Fri, 11 Feb 2022 14:49:00 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-go-notebook/</guid><description>Chapter 1: Introduction Golang 的第一宗旨要著重在可讀性
mental model 很重要，如果寫了 code 但是再回頭看看不懂，表示需要重構了</description></item><item><title>rabbitmq</title><link>https://blog.yakushou.com/posts/programming/rabbitmq/</link><pubDate>Tue, 08 Feb 2022 00:49:12 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/programming/rabbitmq/</guid><description>RabbitMQ
RabbitMQ = message broker (accepts, stores, and forwards binary blobs of data - messages)
術語:
Producer: 送出 messages (sending) Queue: a large message buffer producer 可以送 message 到 queue 裡面 consumer 可以從 queue 把 message 收走 Consumer: 等待接收 messages (receiving) producer, consumer, broker 不需要在相同的 host 上
要先安裝 rabbitMQ service 安裝連結
以下是用 golang 實作練習
用到的 package amqp091-go
Hello World 實作兩個檔案
send.go (代表 producer 送出 message) receive.</description></item><item><title>Mysql</title><link>https://blog.yakushou.com/posts/programming/database/mysql/</link><pubDate>Thu, 27 Jan 2022 15:05:19 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/programming/database/mysql/</guid><description><![CDATA[使用者相關 要注意的是 User, Host 的搭配會影響到使用者可不可以登入
或是登入後的權限不同
% 指的是 localhost
::1 指的是 Ipv6 的 localhost
How to delete or remove a MySQL/MariaDB user account on Linux/Unix
How To Create a New User and Grant Permissions in MySQL
Grant_Priv 欄位是指可不可以更換權限
# 檢視 user 欄位 descmysql.user;# 顯示當前使用者 SELECTuser();# 搜尋使用者 SELECT*FROMmysql.user;# 建立使用者 CREATEUSER&#39;shou&#39;@&#39;%&#39;IDENTIFIEDBY&#39;password&#39;;CREATEUSER&#39;academy&#39;@&#39;172.123.0.0/255.255.0.0&#39;IDENTIFIEDBY&#39;password&#39;;# 更改使用者密碼 ALTERUSER&#39;shou&#39;@&#39;%&#39;IDENTIFIEDBY&#39;newPass&#39;;# 刷新權限 FLUSHPRIVILEGES;# 給予使用者權限 GRANTALLPRIVILEGESON*.*TO&#39;shou&#39;@&#39;%&#39;;GRANTSELECTON*.*TO&#39;shou&#39;@&#39;%&#39;;# 查詢權限 SHOWGRANTSFOR&#39;shou&#39;@&#39;%&#39;;# 刪除使用者 DROPUSER&#39;shou&#39;@&#39;%&#39;;Reset table index ALTERTABLE[table_name]AUTO_INCREMENT=0;]]></description></item><item><title>The Linux Basics Course</title><link>https://blog.yakushou.com/posts/kodekloud/the-linux-basics-course/</link><pubDate>Mon, 24 Jan 2022 00:16:26 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/kodekloud/the-linux-basics-course/</guid><description>The Linux Basics Course
Working with Shell - I / 是根目錄
/home 是所有使用者的家目錄放置的位置
比如一個使用者叫做 shou，那 shou 的家目錄就在 /home/shou
一般使用者不能訪問其他使用者的家目錄
家目錄的標記為 ~ 英文是 tilde
flag 通常是 一個單字 配一個 - hyphen
. 代表當前目錄 .. 代表上一層目錄 通常指令要找 help 的話可以在指令後方加上 -h 或 --help
$HOME 是家目錄的環境變數
Shell Types
Bourne Shell (sh) C Shell (csh or tcsh) Korn Shell (ksh) Z Shell (zsh) Bourne again Shell (bash) # 查看當前是用哪種 shell echo $SHELL Bash Shell Features</description></item><item><title>Ultimate Service V3</title><link>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-service-v3/</link><pubDate>Sun, 23 Jan 2022 21:41:43 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-service-v3/</guid><description>Github repo
整理了下，如果整個 cluster 重啟，要跑哪些步驟
# 把 cluster shutdown make kind-down # 1. 啟動 kind make kind-up # 2. build 新的 service image make all # 3. 設定 kind 要抓本機的 image make kind-load # 4. 設定 kind cluster 要吃本機的 config 設定 make kind-apply # extra: 看 log make kind-logs # extra: 直接更新 kind 設定 # all + kind-load + kind-restart make kind-update Modules Project:
a repo of code defines the philosophy, policy and guideline go mod init [module name] # 範例 go mod init github.</description></item><item><title>Ultimate Go</title><link>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-go/</link><pubDate>Sat, 22 Jan 2022 14:41:10 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-go/</guid><description>Design Guideline Memory &amp;amp; Data semantics</description></item><item><title>Refactor With Bill</title><link>https://blog.yakushou.com/posts/golang/ardanlabs/refactor-with-bill/</link><pubDate>Sat, 22 Jan 2022 13:46:18 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/ardanlabs/refactor-with-bill/</guid><description>Project init 結構會是先建出下列資料夾 (一個 repo 可以執行多個 binary 的結構)
再來是做 go mod init [name]
# 可執行的程式入口 cmd/violin/css/ cmd/violin/image/ cmd/violin/mp3/ cmd/violin/templates/ cmd/violin/internal/ cmd/violin/main.go # 商業邏輯 internal/platform/ go.mod 起手式 main.go
func main(){ if err := run(); err != nil { log.Println(err) os.Exit(1) } } func run() { return nil }</description></item><item><title>ultimate syntax</title><link>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-syntax/</link><pubDate>Tue, 18 Jan 2022 08:25:04 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-syntax/</guid><description>Variables 一般來說使用 int 較多，而不是 int32 或 int64 少用 := zero value，碰到 zero value 的話不如直接用 var 宣吿 Strings string 是 2 words 的 data structures 空字串 第一個 word 是 nil 第二個 word 是 0 字串 Hello 第一個 word 是指標，指向 hello 陣列的 h 位址 第二個 word 是長度 5 Struct golang 的三種印出格式
%v -&amp;gt; {false 0 0} %+v -&amp;gt; {flag:false counter:0 pi:0} %#v -&amp;gt; main.</description></item></channel></rss>