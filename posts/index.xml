<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - YakuShou's NOTEBOOK</title><link>https://blog.yakushou.com/posts/</link><description>All Posts | YakuShou's NOTEBOOK</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 23 Nov 2021 18:26:55 +0800</lastBuildDate><atom:link href="https://blog.yakushou.com/posts/" rel="self" type="application/rss+xml"/><item><title>errors</title><link>https://blog.yakushou.com/posts/golang/packages/errors/</link><pubDate>Tue, 23 Nov 2021 18:26:55 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/errors/</guid><description>#As func As(err error, target interface{}) bool
第一個參數是現在拿到的 error
會透過呼叫 Unwrap 來比對 err 的第一個錯誤是否和 target 相同 如果對的話，會把 target 設定為 err 並回傳 true 否則回傳 false
範例
err := dec.Decode(dst) if err != nil { var syntaxError *json.SyntaxError switch { case errors.As(err, &amp;amp;syntaxError): return fmt.Errorf(&amp;#34;body contains badly-formed JSON (at character %d)&amp;#34;, syntaxError.Offset) default: return err } } #Is func Is(err error, target error) bool
第一個參數是現在拿到的 error 第二個參數是想要比對的特定 error
比對方式是透過呼叫 Unwrap 逐一拆解來比對是否包含 特定的 error</description></item><item><title>json</title><link>https://blog.yakushou.com/posts/golang/packages/json/</link><pubDate>Tue, 23 Nov 2021 17:08:07 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/json/</guid><description><![CDATA[tag 標記用法 範例 json:&quot;name,omitempty&quot;
這個欄位名稱為 name，如果欄位內容是空值的話，則欄位會被忽略
範例 json:&quot;-&quot; 不管欄位名稱是什麼，都會忽略不印出]]></description></item><item><title>golang-migrate</title><link>https://blog.yakushou.com/posts/golang/packages/golang-migrate/</link><pubDate>Sun, 21 Nov 2021 23:36:24 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/golang-migrate/</guid><description>github link
以 postgreSQL 為例
安裝 (用 homebrew) $ brew install golang-migrate 確認版本 $ migrate -version 建立 migration 檔案 # 建立 migration 檔案 $ migrate create -seq -ext=.sql -dir=./migrations create_movies_table -sql : 用數字序列的方式命名 migration 檔案 (如0001, 0002, &amp;hellip;) 預設是用 unix timestamp -ext : 指定 migration 檔案的 extension 名稱 -dir : 表示我們要把 migration 檔案建立在哪個路徑 (若路徑不存在的話會自動建立) create_movies_table 是想要建立的檔案名稱 接著系統會建立兩份 migration 檔案 000001_create_movies_table.down.sql 000001_create_movies_table.up.sql
之後便可在這兩份檔案寫入對應的 SQL 語法
執行 migrate (up) $ export GREENLIGHT_DB_DSN=&amp;#39;postgres://greenlight:@localhost/greenlight?</description></item><item><title>Signal</title><link>https://blog.yakushou.com/posts/golang/signal/</link><pubDate>Sat, 20 Nov 2021 23:24:11 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/signal/</guid><description>Signal 類型 Signal Description Keyboard Shortcut Catchable SIGINT 鍵盤中斷訊號 Ctrl + C true SIGQUIT 鍵盤離開訊號 Ctrl + |true SIGKILL 刪除程序(立即終止) - no SIGTERM 照順序終止程序 - true kill pid 會傳送SIGTERM到程序pid
shutdown() shutdown 的關閉流程不會中斷任何作用中的連線
先關閉所有 open 的 listener 再關閉所有 idle 的 listener 等候作用中連線成為 idle shutdown http.Server 的 Shutdown 會在結束時回傳錯誤碼 (沒錯誤的話回傳 nil)</description></item><item><title>Web Development</title><link>https://blog.yakushou.com/posts/programming/web-development/</link><pubDate>Wed, 17 Nov 2021 16:45:33 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/programming/web-development/</guid><description>web url encoding 在 url 內的 + 代表空白，也可以用 %20 表示</description></item><item><title>Slice</title><link>https://blog.yakushou.com/posts/golang/slice/</link><pubDate>Tue, 16 Nov 2021 22:59:16 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/slice/</guid><description>建立空的 Slice var movies []*Movie movie = &amp;amp;Movie{} // 這樣子建立出來的 movies slice 是 nil // 但已經足夠用來做 append // 不需要寫成 movies := []*Movie{} movies = append(movies, movie)</description></item><item><title>英文: 俚語</title><link>https://blog.yakushou.com/posts/dictionary/en-slang-dictionary/</link><pubDate>Mon, 15 Nov 2021 21:03:22 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/dictionary/en-slang-dictionary/</guid><description>G gotcha （為了嚇人或表示佔了上風時的用語）抓住你了</description></item><item><title>英文: 片語</title><link>https://blog.yakushou.com/posts/dictionary/en-phrase-dictionary/</link><pubDate>Sun, 14 Nov 2021 19:07:49 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/dictionary/en-phrase-dictionary/</guid><description>I in turn 依次，輪流
R rule of thumb 經驗法則
T the nuts and bolts 實質性內容</description></item><item><title>Linux Cmd</title><link>https://blog.yakushou.com/posts/programming/linux-cmd/</link><pubDate>Sun, 14 Nov 2021 10:55:14 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/programming/linux-cmd/</guid><description><![CDATA[find 搜尋檔案
# 在 當前資料夾 下對 檔案名稱 *_spec.rb 做搜尋  $ find . -name &#34;*_spec.rb&#34; export 設定環境變數
# 環境變數 設定資料庫連線 DSN $ export GREENLIGHT_DB_DSN=&#39;postgres://greenlight:@localhost/greenlight?sslmode=disable&#39; # 列出環境變數 $ export -p df 顯示硬碟使用量
short for disk free
Filesystem: 檔案系統 Size: 總容量 Used: 已用容量 Avail: 剩餘容量 Use%: 已用百分比 Mounted on: 掛載點
# -h 以容易識別的格式顯示硬碟空間使用量 $ df -h # -T 顯示每個分割區所屬的檔案系統名稱 $ df -T free 顯示記憶體使用情況
# -m 以 MB 作為單位顯示 $ free -m curl 可以用來做連線資料傳輸]]></description></item><item><title>PostgreSQL</title><link>https://blog.yakushou.com/posts/programming/postgresql/</link><pubDate>Sun, 14 Nov 2021 10:42:24 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/programming/postgresql/</guid><description>介紹 登入機制 peer authentication: 登入過一次後，就不用再驗證，可以直接輸入 psql 進入 cli 模式
password-based authentication: 要輸入密碼才可以登入的驗證
指令 Meta command 在 PostgreSQL 的指令，以 \ 為 meta command， 以提供一些有用的操作
-- see the full list of available meta commands \?-- list all databases \l-- list tables \dt-- list users \du-- list of all available configurations \dF安裝 extension 安裝 citext 的擴充功能
CREATEEXTENSIONIFNOTEXISTScitext;建立使用者 建立名為 greenlight 且密碼為 pa55word 的帳號
CREATEROLEgreenlightWITHLOGINPASSWORD&amp;#39;pa55word&amp;#39;;查看使用者 \du使用者登入 登入 greenlight 角色 需要登入密碼的話會跳出輸入提示
psql --host=localhost --dbname=greenlight --username=greenlight 刪除使用者 在 SHELL 直接輸入指令</description></item></channel></rss>