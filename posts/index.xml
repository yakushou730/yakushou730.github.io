<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - YakuShou's NOTEBOOK</title><link>https://blog.yakushou.com/posts/</link><description>All Posts | YakuShou's NOTEBOOK</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 08 May 2022 18:33:11 +0800</lastBuildDate><atom:link href="https://blog.yakushou.com/posts/" rel="self" type="application/rss+xml"/><item><title>Local development setting</title><link>https://blog.yakushou.com/posts/dev/local/</link><pubDate>Sun, 08 May 2022 18:33:11 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/dev/local/</guid><description><![CDATA[整理
   service local k8s username password     mysql 30000 3306 root secret   postgresql 30001 5432 root secret   redis 30002 6379     etcd 30003 2379, 2380 root     本機開發安裝項目 zsh  安裝 powerlevel10k 主題  site    golang  先至 golang 官網安裝一版新的 golang (因為要有 golang 才可以 build golang)  website install   安裝 GVM 來管理 golang 套件  site   GVM 安裝後就可以安裝各種對應版本的 golang  intel 是 amd64 M1 (apple silicon) 是 arm64   安裝 Goland  website install    git  安裝 cz-conventional  site 這樣可以用 git cz 來做到統一的 commit    npm install -g commitizen cz-conventional-changelog echo &#39;{ &#34;path&#34;: &#34;cz-conventional-changelog&#34; }&#39; &gt; ~/.]]></description></item><item><title>fundamental2</title><link>https://blog.yakushou.com/posts/golang/fundamental2/</link><pubDate>Sun, 06 Mar 2022 22:05:26 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/fundamental2/</guid><description><![CDATA[Reading and Writing bufio 用於 buffered input 和 output
最簡單的 input 方式是使用 fmt 的 Scan 方法
var firstName, lastName string fmt.Scanln(&amp;firstName, &amp;lastName) Scanln 從 standard input 讀取 text，以空白隔開的輸入，直到掃到 newline
Scanf, Fscanf, Sscanf 透過 format string 來 parse 參數
 Scanf 透過 keyboard 輸入 Sscanf 透過其他 string 輸入  透過 bufio 取得輸入字串
// os.Stdin 滿足 io.Reader inputReader = bufio.NewReader(os.Stdin) fmt.Println(&#34;Please enter some input: &#34;) input, err = inputReader.ReadString(&#39;\n&#39;) // err 是 io.]]></description></item><item><title>etcd</title><link>https://blog.yakushou.com/posts/programming/etcd/</link><pubDate>Sun, 06 Mar 2022 11:39:08 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/programming/etcd/</guid><description>install brew install etcd 可在 service list 確認是否正常
brew services list # results etcd started yakushou730 ~/Library/LaunchAgents/homebrew.mxcl.etcd.plist 操作 安裝完後系統會有 etcdctl 的指令可以使用
寫入
etcdctl put foo bar 讀取
etcdctl get foo # result foo bar # 另一個範例 etcdctl get product.rpc --prefix # result product.rpc/7587860940551895303 192.168.0.221:8081 刪除
etcdctl del foo # result 1</description></item><item><title>sort</title><link>https://blog.yakushou.com/posts/golang/packages/sort/</link><pubDate>Fri, 25 Feb 2022 00:31:11 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/sort/</guid><description>Ints 對 int slice 做排序
sort.Ints(arr) IntsAreSorted 回傳 true / false 判斷 int slice 是否已經排序
func IntsAreSorted(arr []int) bool Float64s 對 float slice 做排序
func Float64s(a []float64) Strings 對 string slice 做排序
func Strings(a []string) SearchInts 對 已經排序好的 int arry 做搜尋
回傳 index
func SearchInts(a []int, n int) int SearchFloat64s func SearchFloat64s(a []float64, x float64) int // search for float64 SearchStrings func SearchStrings(a []string, x string) int // search for strings</description></item><item><title>runtime</title><link>https://blog.yakushou.com/posts/golang/packages/runtime/</link><pubDate>Sun, 20 Feb 2022 18:21:13 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/runtime/</guid><description>Caller Caller() 會回傳呼叫到這個 method 的地方的資訊 (時間/檔案/行數)</description></item><item><title>os</title><link>https://blog.yakushou.com/posts/golang/packages/os/</link><pubDate>Sun, 20 Feb 2022 10:25:43 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/os/</guid><description>Exit 透過系統錯誤碼終止程式
Open 以名稱開啟檔案</description></item><item><title>time</title><link>https://blog.yakushou.com/posts/golang/packages/time/</link><pubDate>Sat, 19 Feb 2022 18:27:51 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/time/</guid><description><![CDATA[基本用法 t := time.Now() fmt.Printf(&#34;%02d.%02d.%4d\n&#34;, t.Day(), t.Month(), t.Year()) // e.g.: 29.10.2019 Duration 是指兩個時間相減的 nano second (int64)
Location 會 mapping 時區
 UTC: Universal Coordinated Time
 Since 回傳過了多久
Since(t Time)
Format 把時間轉成特定格式
func (t Time) Format(s string) string
可也以是 time.ANSIC 或 time.RFC822
t := time.Now().UTC() fmt.Println(t.Format(&#34;02 Jan 2006 15:04&#34;))// e.g: 29 Oct 2019 11:00 Sub 時間相減出來的時間差
delta := end.Sub(start)]]></description></item><item><title>strconv</title><link>https://blog.yakushou.com/posts/golang/packages/strconv/</link><pubDate>Sat, 19 Feb 2022 17:44:34 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/strconv/</guid><description>IntSize 回傳 int 的 size 大小
Itoa int 轉 string
strconv.Itoa(i int) string
FormatFloat 把 float 轉成 string
strconv.FormatFloat(f float64, fmt byte, prec int, bitSize int) string
Atoi 字串轉 int
strconv.Atoi(s string) (i int, err error)
ParseFloat 字串轉 float
strconv.ParseFloat(s string, bitSize int) (f float64, err error)</description></item><item><title>strings</title><link>https://blog.yakushou.com/posts/golang/packages/strings/</link><pubDate>Sat, 19 Feb 2022 17:44:28 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/strings/</guid><description>HasPrefix 檢驗字串的 prefix
strings.HasPrefix(s, prefix string) bool
HasSuffix 檢驗字串的 suffix
strings.HasSuffix(s, suffix string) bool
Contains 檢驗字串是否包含 substring
strings.Contains(s, substr string) bool
Index 指出第一個符合的 substring 是在哪個位置，沒找到的話回傳 -1
strings.Index(s, str string) int
LastIndex 指出最後一個符合的 substring 是在哪個位置，沒找到的話回傳 -1
strings.LastIndex(s, str string) int
若是非 ACSII 的話，用 strings.IndexRune(s string, ch int) int
IndexRune 非 ASCII 找 index 時用的
strings.IndexRune(s string, ch int) int
Replace 取代字串，從頭開始 n 次，全部取代的話用 -1
strings.Replace(str, old, new string, n int)</description></item><item><title>Ultimate Go Notebook</title><link>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-go-notebook/</link><pubDate>Fri, 11 Feb 2022 14:49:00 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-go-notebook/</guid><description>Chapter 1: Introduction Golang 的第一宗旨要著重在可讀性
mental model 很重要，如果寫了 code 但是再回頭看看不懂，表示需要重構了</description></item></channel></rss>