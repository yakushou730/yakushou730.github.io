<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>YakuShou's NOTEBOOK</title><link>https://blog.yakushou.com/</link><description>YakuShou's NOTEBOOK</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 06 Mar 2022 11:39:08 +0800</lastBuildDate><atom:link href="https://blog.yakushou.com/index.xml" rel="self" type="application/rss+xml"/><item><title>etcd</title><link>https://blog.yakushou.com/posts/programming/etcd/</link><pubDate>Sun, 06 Mar 2022 11:39:08 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/programming/etcd/</guid><description>install brew install etcd 可在 service list 確認是否正常
brew services list # results etcd started yakushou730 ~/Library/LaunchAgents/homebrew.mxcl.etcd.plist 操作 安裝完後系統會有 etcdctl 的指令可以使用
寫入
etcdctl put foo bar 讀取
etcdctl get foo # result foo bar # 另一個範例 etcdctl get product.rpc --prefix # result product.rpc/7587860940551895303 192.168.0.221:8081 刪除
etcdctl del foo # result 1</description></item><item><title>sort</title><link>https://blog.yakushou.com/posts/golang/packages/sort/</link><pubDate>Fri, 25 Feb 2022 00:31:11 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/sort/</guid><description>Ints 對 int slice 做排序
sort.Ints(arr) IntsAreSorted 回傳 true / false 判斷 int slice 是否已經排序
func IntsAreSorted(arr []int) bool Float64s 對 float slice 做排序
func Float64s(a []float64) Strings 對 string slice 做排序
func Strings(a []string) SearchInts 對 已經排序好的 int arry 做搜尋
回傳 index
func SearchInts(a []int, n int) int SearchFloat64s func SearchFloat64s(a []float64, x float64) int // search for float64 SearchStrings func SearchStrings(a []string, x string) int // search for strings</description></item><item><title>runtime</title><link>https://blog.yakushou.com/posts/golang/packages/runtime/</link><pubDate>Sun, 20 Feb 2022 18:21:13 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/runtime/</guid><description>Caller Caller() 會回傳呼叫到這個 method 的地方的資訊 (時間/檔案/行數)</description></item><item><title>os</title><link>https://blog.yakushou.com/posts/golang/packages/os/</link><pubDate>Sun, 20 Feb 2022 10:25:43 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/os/</guid><description>Exit 透過系統錯誤碼終止程式
Open 以名稱開啟檔案</description></item><item><title>time</title><link>https://blog.yakushou.com/posts/golang/packages/time/</link><pubDate>Sat, 19 Feb 2022 18:27:51 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/time/</guid><description><![CDATA[基本用法 t := time.Now() fmt.Printf(&#34;%02d.%02d.%4d\n&#34;, t.Day(), t.Month(), t.Year()) // e.g.: 29.10.2019 Duration 是指兩個時間相減的 nano second (int64)
Location 會 mapping 時區
 UTC: Universal Coordinated Time
 Since 回傳過了多久
Since(t Time)
Format 把時間轉成特定格式
func (t Time) Format(s string) string
可也以是 time.ANSIC 或 time.RFC822
t := time.Now().UTC() fmt.Println(t.Format(&#34;02 Jan 2006 15:04&#34;))// e.g: 29 Oct 2019 11:00 Sub 時間相減出來的時間差
delta := end.Sub(start)]]></description></item><item><title>strconv</title><link>https://blog.yakushou.com/posts/golang/packages/strconv/</link><pubDate>Sat, 19 Feb 2022 17:44:34 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/strconv/</guid><description>IntSize 回傳 int 的 size 大小
Itoa int 轉 string
strconv.Itoa(i int) string
FormatFloat 把 float 轉成 string
strconv.FormatFloat(f float64, fmt byte, prec int, bitSize int) string
Atoi 字串轉 int
strconv.Atoi(s string) (i int, err error)
ParseFloat 字串轉 float
strconv.ParseFloat(s string, bitSize int) (f float64, err error)</description></item><item><title>strings</title><link>https://blog.yakushou.com/posts/golang/packages/strings/</link><pubDate>Sat, 19 Feb 2022 17:44:28 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/packages/strings/</guid><description>HasPrefix 檢驗字串的 prefix
strings.HasPrefix(s, prefix string) bool
HasSuffix 檢驗字串的 suffix
strings.HasSuffix(s, suffix string) bool
Contains 檢驗字串是否包含 substring
strings.Contains(s, substr string) bool
Index 指出第一個符合的 substring 是在哪個位置，沒找到的話回傳 -1
strings.Index(s, str string) int
LastIndex 指出最後一個符合的 substring 是在哪個位置，沒找到的話回傳 -1
strings.LastIndex(s, str string) int
若是非 ACSII 的話，用 strings.IndexRune(s string, ch int) int
IndexRune 非 ASCII 找 index 時用的
strings.IndexRune(s string, ch int) int
Replace 取代字串，從頭開始 n 次，全部取代的話用 -1
strings.Replace(str, old, new string, n int)</description></item><item><title>Ultimate Go Notebook</title><link>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-go-notebook/</link><pubDate>Fri, 11 Feb 2022 14:49:00 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/golang/ardanlabs/ultimate-go-notebook/</guid><description>Chapter 1: Introduction Golang 的第一宗旨要著重在可讀性
mental model 很重要，如果寫了 code 但是再回頭看看不懂，表示需要重構了</description></item><item><title>rabbitmq</title><link>https://blog.yakushou.com/posts/programming/rabbitmq/</link><pubDate>Tue, 08 Feb 2022 00:49:12 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/programming/rabbitmq/</guid><description>RabbitMQ
RabbitMQ = message broker (accepts, stores, and forwards binary blobs of data - messages)
術語:
Producer: 送出 messages (sending) Queue: a large message buffer producer 可以送 message 到 queue 裡面 consumer 可以從 queue 把 message 收走 Consumer: 等待接收 messages (receiving) producer, consumer, broker 不需要在相同的 host 上
要先安裝 rabbitMQ service 安裝連結
以下是用 golang 實作練習
用到的 package amqp091-go
Hello World 實作兩個檔案
send.go (代表 producer 送出 message) receive.</description></item><item><title>iam</title><link>https://blog.yakushou.com/posts/aws/iam/</link><pubDate>Mon, 07 Feb 2022 11:51:44 +0800</pubDate><author><name>yakushou730</name><uri>https://github.com/yakushou730</uri><email>yakushou730@gmail.com</email></author><guid>https://blog.yakushou.com/posts/aws/iam/</guid><description>設定帳戶密碼失敗 可能是碰到需要 MFA 操作，但是在剛建立使用者的時候還沒有 MFA 的關係
AWS: Allows MFA-authenticated IAM users to manage their own credentials on the My Security Credentials page
AWS IAM won&amp;rsquo;t let my users change their passwords
做法有兩種
改 policy 的規則，讓變更密碼這件事不需要 MFA (官方說不推薦這做法) 砍掉帳號重新建立一個，然後先不要勾 Require password reset，等他登入後設定完 MFA，這樣之後就可以改密碼了</description></item></channel></rss>